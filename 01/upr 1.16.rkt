#lang racket
; Упражнение 1.16.
; Напишите процедуру, которая развивается в виде итеративного процесса и реализует возведение в
; степень за логарифмическое число шагов, как fast-expt. (Указание: используя наблюдение, что
; (b^ (n/2))^2 = (b^2)^(n/2)
; , храните, помимо значения степени n и основания b, дополнительную переменную состояния a, и определите переход между состояниями так, чтобы произведение abn
; от шага к
; шагу не менялось. Вначале значение a берется равным 1, а ответ получается как значение a в
; момент окончания процесса. В общем случае метод определения инварианта (invariant quantity),
; который не изменяется при переходе между шагами, является мощным способом размышления о
; построении итеративных алгоритмов.)

(define (even? n)
   (= (remainder n 2) 0)
   )
(define (square x)
  (* x x)
  )

(define (expt-fast b n)
  (cond ((= n 0) 1)
        ((even? n) (square (expt-fast b (/ n 2))))
        ( else (* b (expt-fast b (- n 1))))
        )
  )

(expt 2 3)
(expt-iter 2 3 1)
(expt-fast 2 7)
(expt-fast 2 320)