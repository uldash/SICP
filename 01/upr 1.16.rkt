#lang racket
; Упражнение 1.16.
; Напишите процедуру, которая развивается в виде итеративного процесса и реализует возведение в
; степень за логарифмическое число шагов, как fast-expt. (Указание: используя наблюдение, что
; (b^ (n/2))^2 = (b^2)^(n/2)
; , храните, помимо значения степени n и основания b, дополнительную переменную состояния a, и определите переход между состояниями так, чтобы произведение abn
; от шага к
; шагу не менялось. Вначале значение a берется равным 1, а ответ получается как значение a в
; момент окончания процесса. В общем случае метод определения инварианта (invariant quantity),
; который не изменяется при переходе между шагами, является мощным способом размышления о
; построении итеративных алгоритмов.)

(define (square x) (* x x))

(define (fast-expt b n) 
  (fast-expt-iter 1 b n))

(define (fast-expt-iter a b n) 
  (if (= n 0) 
      a 
      (if (even? n) 
          (fast-expt-iter a (square b) (/ n 2)) 
          (fast-expt-iter (* a b) b (- n 1)))))

(fast-expt 2 320)

; Как и указано в условии упражнения, инвариантом будет a*b^n = const.
; В начале процесса a полагаем равным 1 и как следствие результат будет равен b^n. Условием выхода из процесса является n=0, а стало быть a*b^n = a.